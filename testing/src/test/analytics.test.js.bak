import { describe, it, expect, beforeEach } from 'vitest';
import { rest } from 'msw';
import { server } from './setup';
import { mockToken, BASE_URL } from './setup';
import { createAuthenticatedApi } from './utils';

describe('Analytics & Reporting API', () => {
  let api;
  
  beforeEach(() => {
    localStorage.setItem('token', mockToken);
    // Create a fresh authenticated API instance before each test
    api = createAuthenticatedApi();
  });

  describe('Analytics APIs', () => {
    it('GET /analytics/users - should fetch user analytics', async () => {
      const mockUserAnalytics = {
        growth: {
          daily: 50,
          weekly: 300,
          monthly: 1200
        },
        activeUsers: {
          daily: 1000,
          weekly: 5000,
          monthly: 15000
        },
        engagement: {
          averageSessionDuration: 15,
          bounceRate: 0.25
        },
        retention: {
          day7: 0.7,
          day30: 0.5
        },
        demographics: {
          countries: {
            'US': 40,
            'UK': 20,
            'FR': 15
          }
        }
      };

      server.use(
        rest.get(`${BASE_URL}/api/analytics/users`, (req, res, ctx) => {
          // Check for authorization header
          expect(req.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);
          return res(ctx.status(200), ctx.json(mockUserAnalytics));
        })
      );

      const response = await api.get('/analytics/users');
      expect(response.status).toBe(200);
      expect(response.data.growth).toBeDefined();
      expect(response.data.activeUsers).toBeDefined();
    });

    it('GET /analytics/content - should fetch content analytics', async () => {
      const mockContentAnalytics = {
        destinations: {
          mostViewed: ['Paris', 'London', 'Tokyo'],
          trending: ['Dubai', 'Bali', 'Barcelona']
        },
        activities: {
          popular: ['Eiffel Tower', 'Big Ben', 'Mount Fuji'],
          highestRated: ['Louvre Tour', 'Thames Cruise']
        },
        experiences: {
          mostShared: ['Paris Adventure', 'London Weekend'],
          engagement: {
            averageViews: 500,
            averageComments: 10
          }
        }
      };

      server.use(
        rest.get(`${BASE_URL}/api/analytics/content`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockContentAnalytics));
        })
      );

      const response = await api.get('/analytics/content');
      expect(response.status).toBe(200);
      expect(response.data.destinations).toBeDefined();
      expect(response.data.activities).toBeDefined();
    });

    it('GET /analytics/trips - should fetch trip analytics', async () => {
      const mockTripAnalytics = {
        creation: {
          daily: 100,
          weekly: 600,
          monthly: 2500
        },
        duration: {
          average: 7,
          distribution: {
            'short': 0.3,
            'medium': 0.5,
            'long': 0.2
          }
        },
        seasonal: {
          summer: 0.4,
          winter: 0.2,
          spring: 0.2,
          fall: 0.2
        },
        budget: {
          average: 2500,
          distribution: {
            'budget': 0.3,
            'moderate': 0.5,
            'luxury': 0.2
          }
        }
      };

      server.use(
        rest.get(`${BASE_URL}/api/analytics/trips`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockTripAnalytics));
        })
      );

      const response = await api.get('/analytics/trips');
      expect(response.status).toBe(200);
      expect(response.data.creation).toBeDefined();
      expect(response.data.duration).toBeDefined();
    });

    it('GET /analytics/engagement - should fetch engagement metrics', async () => {
      const mockEngagementMetrics = {
        likes: {
          total: 50000,
          average: 25
        },
        comments: {
          total: 10000,
          average: 5
        },
        shares: {
          total: 5000,
          average: 2.5
        },
        userActivity: {
          activeUsers: 10000,
          postsPerUser: 3.5
        }
      };

      server.use(
        rest.get(`${BASE_URL}/api/analytics/engagement`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockEngagementMetrics));
        })
      );

      const response = await api.get('/analytics/engagement');
      expect(response.status).toBe(200);
      expect(response.data.likes).toBeDefined();
      expect(response.data.comments).toBeDefined();
    });
  });

  describe('Reports API', () => {
    it('GET /reports - should fetch all reports', async () => {
      const mockReports = {
        reports: [
          {
            id: '1',
            type: 'user',
            status: 'resolved',
            reason: 'inappropriate_content'
          }
        ],
        total: 1,
        page: 1,
        limit: 10
      };

      server.use(
        rest.get(`${BASE_URL}/api/reports`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockReports));
        })
      );

      const response = await api.get('/reports');
      expect(response.status).toBe(200);
      expect(response.data.reports).toHaveLength(1);
    });

    it('GET /reports/:id - should fetch report details', async () => {
      const reportId = '1';
      const mockReport = {
        id: reportId,
        type: 'user',
        status: 'resolved',
        reason: 'inappropriate_content',
        details: 'Detailed description',
        reportedBy: 'user123',
        createdAt: '2024-03-20T10:00:00Z'
      };

      server.use(
        rest.get(`${BASE_URL}/api/reports/${reportId}`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockReport));
        })
      );

      const response = await api.get(`/reports/${reportId}`);
      expect(response.status).toBe(200);
      expect(response.data.id).toBe(reportId);
    });

    it('POST /reports - should create new report', async () => {
      const newReport = {
        type: 'content',
        reason: 'spam',
        details: 'Spam content in experience',
        targetId: 'exp123'
      };

      server.use(
        rest.post(`${BASE_URL}/api/reports`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(newReport);
          return res(ctx.status(201), ctx.json({
            message: 'Report created successfully',
            report: { ...newReport, id: '2', status: 'pending' }
          }));
        })
      );

      const response = await api.post('/reports', newReport);
      expect(response.status).toBe(201);
      expect(response.data.report.status).toBe('pending');
    });

    it('PUT /reports/:id - should update report status', async () => {
      const reportId = '1';
      const update = { status: 'resolved', resolution: 'Content removed' };

      server.use(
        rest.put(`${BASE_URL}/api/reports/${reportId}`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(update);
          return res(ctx.status(200), ctx.json({
            message: 'Report updated successfully',
            report: { id: reportId, ...update }
          }));
        })
      );

      const response = await api.put(`/reports/${reportId}`, update);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Report updated successfully');
    });

    it('GET /reports/stats - should fetch report statistics', async () => {
      const mockStats = {
        total: 100,
        resolved: 75,
        pending: 25,
        byReason: {
          'inappropriate_content': 50,
          'spam': 30,
          'other': 20
        },
        resolutionTime: {
          average: '48h',
          median: '24h'
        }
      };

      server.use(
        rest.get(`${BASE_URL}/api/reports/stats`, (req, res, ctx) => {
          return res(ctx.status(200), ctx.json(mockStats));
        })
      );

      const response = await api.get('/reports/stats');
      expect(response.status).toBe(200);
      expect(response.data.total).toBe(100);
      expect(response.data.resolved).toBe(75);
    });
  });
}); 