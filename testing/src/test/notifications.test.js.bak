import { describe, it, expect, beforeEach } from 'vitest';
import { rest } from 'msw';
import { server } from './setup';
import { mockToken, BASE_URL } from './setup';
import { createAuthenticatedApi } from './utils';

describe('Notifications API', () => {
  let api;

  beforeEach(() => {
    localStorage.setItem('token', mockToken);
    // Create a fresh authenticated API instance before each test
    api = createAuthenticatedApi();
  });

  const mockNotification = {
    id: '1',
    type: 'trip_reminder',
    title: 'Upcoming Trip',
    message: 'Your trip to Paris starts tomorrow!',
    userId: 'user123',
    read: false,
    createdAt: '2024-03-20T10:00:00Z'
  };

  it('POST /notifications - should send notification', async () => {
    const notification = {
      userId: 'user123',
      type: 'general',
      title: 'Test Notification',
      message: 'This is a test notification'
    };

    server.use(
      rest.post(`${BASE_URL}/api/notifications`, async (req, res, ctx) => {
        const body = await req.json();
        expect(body).toEqual(notification);
        return res(ctx.status(201), ctx.json({
          message: 'Notification sent successfully',
          notification: { ...notification, id: 'note123', createdAt: new Date().toISOString() }
        }));
      })
    );

    const response = await api.post('/notifications', notification);
    expect(response.status).toBe(201);
    expect(response.data.message).toBe('Notification sent successfully');
  });

  it('GET /notifications - should fetch notifications', async () => {
    const mockNotifications = {
      notifications: [
        {
          id: 'note123',
          type: 'general',
          title: 'Notification Title',
          message: 'Notification Message',
          createdAt: new Date().toISOString(),
          isRead: false
        }
      ],
      total: 1,
      unread: 1
    };

    server.use(
      rest.get(`${BASE_URL}/api/notifications`, (req, res, ctx) => {
        return res(ctx.status(200), ctx.json(mockNotifications));
      })
    );

    const response = await api.get('/notifications');
    expect(response.status).toBe(200);
    expect(response.data.notifications).toHaveLength(1);
  });

  it('GET /notifications/templates - should fetch notification templates', async () => {
    const mockTemplates = {
      templates: [
        {
          id: 'welcome',
          title: 'Welcome to Hermes',
          content: 'Welcome to the Hermes platform. Start planning your adventures!',
          variables: ['userName']
        },
        {
          id: 'trip-reminder',
          title: 'Trip Reminder',
          content: 'Your trip to {{destination}} is coming up in {{days}} days!',
          variables: ['userName', 'destination', 'days']
        }
      ]
    };

    server.use(
      rest.get(`${BASE_URL}/api/notifications/templates`, (req, res, ctx) => {
        return res(ctx.status(200), ctx.json(mockTemplates));
      })
    );

    const response = await api.get('/notifications/templates');
    expect(response.status).toBe(200);
    expect(response.data.templates).toHaveLength(2);
  });

  it('PUT /notifications/preferences - should update notification preferences', async () => {
    const preferences = {
      email: {
        marketing: false,
        trip_updates: true,
        security: true
      },
      push: {
        marketing: false,
        trip_updates: true,
        security: true
      }
    };

    server.use(
      rest.put(`${BASE_URL}/api/notifications/preferences`, async (req, res, ctx) => {
        const body = await req.json();
        expect(body).toEqual(preferences);
        return res(ctx.status(200), ctx.json({
          message: 'Preferences updated successfully',
          preferences
        }));
      })
    );

    const response = await api.put('/notifications/preferences', preferences);
    expect(response.status).toBe(200);
    expect(response.data.message).toBe('Preferences updated successfully');
  });

  it('GET /notifications/history - should fetch notification history', async () => {
    const mockHistory = {
      history: [
        {
          id: 'hist123',
          type: 'email',
          recipient: 'user@example.com',
          subject: 'Welcome Email',
          status: 'delivered',
          sentAt: new Date().toISOString()
        }
      ],
      total: 1
    };

    server.use(
      rest.get(`${BASE_URL}/api/notifications/history`, (req, res, ctx) => {
        return res(ctx.status(200), ctx.json(mockHistory));
      })
    );

    const response = await api.get('/notifications/history');
    expect(response.status).toBe(200);
    expect(response.data.history).toHaveLength(1);
  });

  it('POST /notifications/bulk - should send bulk notifications', async () => {
    const bulkRequest = {
      userIds: ['user1', 'user2', 'user3'],
      notification: {
        type: 'announcement',
        title: 'Platform Update',
        message: 'We have updated our platform with new features!'
      }
    };

    server.use(
      rest.post(`${BASE_URL}/api/notifications/bulk`, async (req, res, ctx) => {
        const body = await req.json();
        expect(body).toEqual(bulkRequest);
        return res(ctx.status(200), ctx.json({
          message: 'Bulk notifications sent',
          sent: 3,
          failed: 0
        }));
      })
    );

    const response = await api.post('/notifications/bulk', bulkRequest);
    expect(response.status).toBe(200);
    expect(response.data.sent).toBe(3);
  });

  describe('Account Related Notifications', () => {
    it('should handle welcome emails', async () => {
      const welcomeRequest = {
        email: 'newuser@example.com',
        name: 'New User',
        templateId: 'welcome'
      };

      server.use(
        rest.post(`${BASE_URL}/api/notifications/account/welcome`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(welcomeRequest);
          return res(ctx.status(200), ctx.json({
            message: 'Welcome email sent successfully'
          }));
        })
      );

      const response = await api.post('/notifications/account/welcome', welcomeRequest);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Welcome email sent successfully');
    });

    it('should handle password reset notifications', async () => {
      const resetRequest = {
        email: 'user@example.com',
        resetLink: 'https://hermes.example/reset/token123'
      };

      server.use(
        rest.post(`${BASE_URL}/api/notifications/account/password-reset`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(resetRequest);
          return res(ctx.status(200), ctx.json({
            message: 'Password reset email sent'
          }));
        })
      );

      const response = await api.post('/notifications/account/password-reset', resetRequest);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Password reset email sent');
    });

    it('should handle security alerts', async () => {
      const alertRequest = {
        userId: 'user123',
        alertType: 'login_from_new_device',
        deviceInfo: {
          browser: 'Chrome',
          os: 'Windows',
          ip: '192.168.1.1'
        }
      };

      server.use(
        rest.post(`${BASE_URL}/api/notifications/account/security-alert`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(alertRequest);
          return res(ctx.status(200), ctx.json({
            message: 'Security alert sent'
          }));
        })
      );

      const response = await api.post('/notifications/account/security-alert', alertRequest);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Security alert sent');
    });
  });

  describe('Trip Related Notifications', () => {
    it('should handle trip reminders', async () => {
      const reminderRequest = {
        tripId: 'trip123',
        userId: 'user123',
        days: 5,
        destination: 'Paris'
      };

      server.use(
        rest.post(`${BASE_URL}/api/notifications/trips/reminder`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(reminderRequest);
          return res(ctx.status(200), ctx.json({
            message: 'Trip reminder sent'
          }));
        })
      );

      const response = await api.post('/notifications/trips/reminder', reminderRequest);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Trip reminder sent');
    });

    it('should handle trip participant invitations', async () => {
      const inviteRequest = {
        tripId: 'trip123',
        inviterId: 'user123',
        inviteeEmail: 'friend@example.com',
        tripName: 'Paris Weekend'
      };

      server.use(
        rest.post(`${BASE_URL}/api/notifications/trips/invite`, async (req, res, ctx) => {
          const body = await req.json();
          expect(body).toEqual(inviteRequest);
          return res(ctx.status(200), ctx.json({
            message: 'Trip invitation sent'
          }));
        })
      );

      const response = await api.post('/notifications/trips/invite', inviteRequest);
      expect(response.status).toBe(200);
      expect(response.data.message).toBe('Trip invitation sent');
    });
  });
}); 